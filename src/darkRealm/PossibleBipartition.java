package darkRealm;

import java.util.*;

public class PossibleBipartition {

//  886. Possible Bipartition
//  Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.
//
//  Each person may dislike some other people, and they should not go into the same group.
//
//  Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.
//
//  Return true if and only if it is possible to split everyone into two groups in this way.
//
//      Example 1:
//
//  Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
//  Output: true
//  Explanation: group1 [1,4], group2 [2,3]
//  Example 2:
//
//  Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
//  Output: false
//  Example 3:
//
//  Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
//  Output: false
//
//
//  Note:
//
//      1 <= N <= 2000
//      0 <= dislikes.length <= 10000
//      1 <= dislikes[i][j] <= N
//  dislikes[i][0] < dislikes[i][1]
//  There does not exist i != j for which dislikes[i] == dislikes[j].


  // this is an MColoring graph problem with just 2 colors [+1, -1]
  public static boolean possibleBipartition(int N, int[][] dislikes) {
    if (N < 0 || dislikes == null) return false;
    List<List<Integer>> adjacencyList = new ArrayList<>();

    for (int i = 0; i < N + 1; i++)
      adjacencyList.add(new ArrayList<>());

    // form adjacency list
    for (int[] edge : dislikes) {
      int from = edge[0];
      int to = edge[1];
      adjacencyList.get(from).add(to);
      adjacencyList.get(to).add(from);
    }

    int[] assignedColors = new int[N + 1];

    for (int i = 1; i <= N; i++) {
      // already colored this part, skip
      if (assignedColors[i] != 0) continue;
      // color this with 1, we will use two colors -1 & +1
      boolean canBeColored = dfsColorGraph(assignedColors, adjacencyList, i, 1);
      if (!canBeColored) return false;
    }

    System.out.println(Arrays.toString(assignedColors));
    return true;
  }

  private static boolean dfsColorGraph(int[] assignedColors, List<List<Integer>> adjList, int vertex, int color) {
    // if already colored, return true if it has the same color
    if (assignedColors[vertex] != 0)
      return assignedColors[vertex] == color;
    // apply color
    assignedColors[vertex] = color;
    List<Integer> neighbors = adjList.get(vertex);
    for (int n : neighbors) {
      boolean neighborCanBeColored = dfsColorGraph(assignedColors, adjList, n, -1 * color); // negate the color to paint neighbors
      if (!neighborCanBeColored) return false;
    }
    // finally if all the neighbors can be colored return true
    return true;
  }

  public static void main(String[] args) {
//    int N = 4;
//    int[][] arr = new int[][]{{1, 2}, {1, 3}, {2, 4}};

//    int N = 3;
//    int[][] arr = new int[][]{{1, 2}, {1, 3}, {2, 3}};


//    int N = 5;
//    int[][] arr = new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {1, 5}};


    int N = 200;

    int[][] arr = new int[][]{{131, 143}, {167, 174}, {112, 176}, {172, 187}, {69, 139}, {116, 158}, {99, 126}, {96, 146}, {106, 111}, {174, 195}, {104, 115}, {160, 190}, {129, 139}, {157, 186}, {149, 184}, {28, 88}, {84, 125}, {27, 122}, {119, 165}, {184, 189}, {143, 194}, {106, 170}, {140, 165}, {87, 174}, {169, 177}, {10, 97}, {165, 187}, {95, 183}, {111, 123}, {68, 92}, {76, 155}, {56, 177}, {84, 95}, {163, 189}, {158, 200}, {11, 125}, {64, 177}, {68, 122}, {147, 185}, {57, 194}, {192, 200}, {151, 199}, {35, 46}, {172, 200}, {113, 136}, {88, 93}, {196, 198}, {4, 196}, {190, 195}, {40, 192}, {76, 121}, {93, 171}, {61, 182}, {103, 115}, {188, 193}, {108, 126}, {71, 138}, {149, 171}, {162, 197}, {113, 196}, {169, 186}, {27, 160}, {99, 183}, {189, 191}, {107, 190}, {77, 185}, {72, 180}, {126, 156}, {168, 179}, {6, 146}, {43, 91}, {96, 104}, {100, 129}, {75, 102}, {80, 107}, {198, 199}, {97, 108}, {5, 43}, {153, 178}, {3, 55}, {41, 136}, {93, 147}, {3, 190}, {89, 123}, {28, 174}, {151, 186}, {76, 112}, {77, 126}, {110, 148}, {107, 141}, {65, 193}, {155, 182}, {179, 181}, {32, 143}, {107, 145}, {20, 89}, {154, 161}, {164, 168}, {47, 99}, {177, 192}, {130, 194}, {41, 160}, {126, 189}, {96, 172}, {45, 166}, {78, 108}, {79, 102}, {16, 88}, {190, 191}, {164, 182}, {89, 116}, {104, 188}, {150, 183}, {23, 109}, {26, 179}, {19, 53}, {85, 89}, {98, 115}, {139, 173}, {160, 198}, {147, 199}, {178, 194}, {22, 175}, {152, 186}, {50, 180}, {192, 198}, {72, 200}, {146, 161}, {110, 181}, {84, 168}, {113, 186}, {19, 136}, {60, 145}, {84, 150}, {174, 197}, {123, 181}, {179, 186}, {157, 191}, {149, 189}, {151, 169}, {180, 189}, {154, 168}, {132, 183}, {187, 197}, {29, 101}, {182, 195}, {183, 190}, {59, 116}, {126, 142}, {134, 171}, {95, 179}, {180, 193}, {127, 143}, {3, 31}, {75, 143}, {63, 161}, {153, 188}, {109, 182}, {147, 178}, {79, 141}, {73, 78}, {130, 143}, {89, 164}, {15, 84}, {50, 120}, {153, 166}, {26, 92}, {147, 152}, {155, 165}, {160, 176}, {72, 127}, {126, 197}, {117, 135}, {60, 134}, {184, 191}, {63, 139}, {17, 70}, {19, 93}, {81, 170}, {15, 189}, {77, 164}, {150, 175}, {1, 18}, {93, 193}, {119, 149}, {180, 200}, {127, 180}, {10, 192}, {114, 171}, {62, 169}, {60, 83}, {86, 121}, {45, 143}, {112, 143}, {81, 197}, {162, 196}, {109, 175}, {183, 194}, {103, 185}, {152, 161}, {100, 121}, {107, 110}, {11, 85}, {53, 173}, {131, 151}, {129, 130}, {85, 153}, {31, 61}, {78, 95}, {50, 194}, {75, 95}, {88, 162}, {34, 51}, {125, 192}, {85, 131}, {175, 188}, {65, 69}, {152, 195}, {144, 160}, {44, 49}, {6, 197}, {37, 187}, {70, 155}, {73, 133}, {153, 185}, {55, 127}, {94, 172}, {126, 130}, {71, 184}, {135, 199}, {96, 106}, {146, 178}, {53, 140}, {49, 100}, {107, 180}, {153, 157}, {29, 179}, {116, 148}, {181, 189}, {5, 51}, {93, 182}, {60, 148}, {38, 88}, {12, 43}, {33, 170}, {13, 114}, {189, 196}, {109, 127}, {72, 143}, {27, 96}, {148, 185}, {145, 196}, {76, 173}, {12, 186}, {118, 197}, {122, 123}, {163, 169}, {23, 111}, {35, 198}, {13, 30}, {87, 123}, {13, 183}, {33, 65}, {112, 167}, {184, 185}, {142, 159}, {103, 175}, {158, 194}, {19, 98}, {143, 170}, {64, 153}, {176, 187}, {56, 141}, {129, 156}, {188, 195}, {68, 149}, {141, 148}, {185, 195}, {27, 67}, {69, 168}, {53, 89}, {131, 182}, {4, 200}, {92, 105}, {117, 188}, {154, 182}, {55, 87}, {6, 85}, {143, 193}, {169, 170}, {187, 199}, {43, 58}, {12, 177}, {110, 127}, {27, 159}, {182, 193}, {187, 189}, {67, 111}, {188, 190}, {101, 134}, {154, 195}, {51, 59}, {8, 84}, {45, 81}, {82, 120}, {77, 157}, {193, 199}, {66, 195}, {172, 183}, {61, 155}, {86, 94}, {118, 130}, {19, 147}, {147, 154}, {113, 139}, {160, 178}, {42, 153}, {109, 113}, {48, 160}, {113, 118}, {67, 147}, {163, 198}, {70, 140}, {124, 187}, {22, 33}, {105, 135}, {162, 198}, {32, 117}, {1, 153}, {88, 102}, {102, 170}, {76, 185}, {166, 192}, {31, 122}, {138, 175}, {54, 62}, {42, 110}, {159, 184}, {133, 181}, {195, 198}, {68, 88}, {1, 10}, {57, 85}, {64, 104}, {125, 144}, {41, 122}, {194, 198}, {172, 174}, {84, 184}, {39, 123}, {128, 179}, {99, 107}, {88, 132}, {39, 188}, {186, 197}, {40, 77}, {30, 192}, {129, 186}, {191, 199}, {42, 108}, {161, 174}, {157, 195}, {95, 163}, {170, 189}, {191, 193}, {21, 185}, {146, 150}, {8, 97}, {173, 186}, {68, 109}, {142, 154}, {3, 156}, {56, 162}, {192, 195}, {14, 66}, {30, 184}, {35, 182}, {151, 163}, {117, 151}, {41, 150}, {110, 152}, {35, 181}, {179, 185}, {68, 182}, {161, 167}, {69, 183}, {80, 141}, {40, 90}, {124, 197}, {167, 192}, {140, 173}, {33, 109}, {80, 163}, {124, 163}, {165, 179}, {117, 126}, {134, 180}, {125, 162}, {77, 136}, {51, 173}, {111, 115}, {15, 129}, {133, 200}, {39, 105}, {63, 177}, {152, 190}, {93, 124}, {94, 122}, {46, 119}, {176, 189}, {3, 171}, {18, 150}, {75, 198}, {187, 192}, {197, 199}, {180, 185}, {100, 198}, {46, 126}, {48, 58}, {21, 49}, {187, 191}, {96, 157}, {19, 62}, {32, 86}, {64, 154}, {84, 94}, {94, 125}, {91, 109}, {193, 197}, {172, 177}, {43, 134}, {93, 152}, {41, 62}, {40, 50}, {193, 194}, {9, 32}, {42, 135}, {28, 105}, {148, 159}, {120, 197}, {161, 177}, {144, 151}, {58, 162}, {119, 163}, {174, 186}, {62, 63}, {36, 43}, {99, 108}, {56, 107}, {161, 171}, {79, 112}, {75, 138}, {93, 157}, {55, 68}, {126, 139}, {135, 181}, {137, 174}, {67, 86}, {170, 176}, {24, 58}, {83, 91}, {195, 200}, {124, 175}, {134, 184}, {129, 198}, {59, 194}, {123, 170}, {124, 192}, {66, 167}, {65, 182}, {90, 162}, {138, 145}, {7, 135}, {171, 179}, {115, 162}, {88, 200}, {150, 197}, {190, 197}, {184, 193}, {26, 77}, {18, 30}, {182, 191}, {73, 167}, {8, 153}, {108, 197}, {67, 182}, {48, 191}, {72, 140}, {61, 170}, {189, 190}, {69, 117}, {22, 82}, {19, 76}, {140, 176}, {33, 106}, {136, 144}, {90, 125}, {168, 185}, {178, 183}, {84, 108}, {77, 141}, {74, 134}, {18, 109}, {24, 154}, {125, 129}, {108, 191}, {192, 197}, {181, 200}, {41, 85}, {147, 170}, {113, 187}, {60, 108}, {140, 194}, {103, 186}, {156, 189}, {78, 87}, {186, 189}, {160, 162}, {153, 192}, {180, 188}, {110, 128}, {143, 196}, {187, 194}, {116, 164}, {28, 120}, {140, 175}, {85, 186}, {104, 162}, {73, 148}, {100, 168}, {65, 110}, {139, 181}, {127, 140}, {101, 153}, {80, 187}, {14, 138}, {105, 197}, {86, 97}, {125, 154}, {44, 118}, {158, 198}, {5, 30}, {172, 197}, {12, 79}, {172, 180}, {41, 180}, {113, 188}, {23, 182}, {157, 159}, {28, 163}, {150, 152}, {130, 151}, {25, 123}, {106, 129}, {54, 170}, {98, 187}, {91, 189}, {150, 180}, {13, 130}, {137, 193}, {117, 162}, {80, 156}, {136, 158}, {76, 179}, {178, 182}, {118, 188}, {107, 184}, {125, 185}, {15, 142}, {32, 104}, {195, 197}, {9, 122}, {67, 121}, {115, 147}, {170, 184}, {140, 154}, {159, 197}, {84, 189}, {183, 195}, {179, 190}, {167, 188}, {112, 142}, {156, 179}, {20, 144}, {182, 200}, {38, 135}, {191, 194}, {120, 199}, {120, 190}, {47, 127}, {136, 191}, {104, 106}, {96, 176}, {56, 109}, {152, 194}, {33, 125}, {58, 111}, {64, 118}, {165, 183}, {108, 123}, {191, 196}, {179, 194}, {49, 131}, {173, 189}, {21, 166}, {128, 183}, {87, 89}, {62, 85}, {172, 192}, {103, 141}, {36, 81}, {85, 163}, {140, 197}, {141, 156}, {142, 163}, {3, 71}, {133, 147}, {87, 198}, {105, 140}, {62, 134}, {164, 169}, {150, 184}, {177, 199}, {33, 141}, {139, 169}, {38, 158}, {112, 192}, {104, 189}, {39, 159}, {155, 197}, {65, 107}, {78, 192}, {60, 197}, {141, 161}, {70, 73}, {147, 198}, {45, 89}, {19, 26}, {20, 134}, {168, 174}, {192, 199}, {90, 191}, {186, 200}, {172, 191}, {33, 51}, {10, 96}, {80, 121}, {131, 145}, {5, 61}, {11, 38}, {110, 144}, {91, 128}, {186, 187}, {68, 179}, {129, 183}, {139, 200}, {118, 172}, {111, 185}, {20, 97}, {17, 161}, {14, 27}, {143, 198}, {1, 102}, {87, 114}, {38, 184}, {109, 139}, {131, 196}, {180, 191}, {183, 185}, {116, 180}, {106, 176}, {2, 31}, {35, 119}, {27, 178}, {149, 194}, {3, 30}, {175, 191}, {6, 27}, {76, 159}, {168, 200}, {115, 140}, {54, 156}, {48, 115}, {61, 111}, {114, 139}, {183, 196}, {115, 178}, {46, 138}, {57, 190}, {198, 200}, {118, 141}, {72, 95}, {92, 130}, {116, 135}, {157, 183}, {118, 167}, {120, 194}, {161, 188}, {144, 148}, {26, 71}, {105, 158}, {119, 166}, {188, 197}, {126, 172}, {45, 151}, {98, 147}, {38, 136}, {44, 59}, {104, 171}, {145, 171}, {196, 199}, {25, 185}, {168, 169}, {83, 86}, {30, 132}, {58, 155}, {124, 172}, {169, 199}, {6, 61}, {64, 180}, {147, 186}, {98, 178}, {36, 78}, {80, 119}, {170, 188}, {114, 156}, {16, 25}, {128, 168}, {139, 198}, {131, 165}, {94, 150}, {35, 57}, {132, 166}, {40, 76}, {123, 184}, {92, 183}, {2, 126}, {157, 170}, {105, 137}, {28, 72}, {162, 192}, {121, 174}, {123, 166}, {13, 147}, {187, 200}, {195, 196}, {132, 171}, {14, 168}, {96, 117}, {168, 182}, {169, 200}, {5, 135}, {125, 170}, {15, 191}, {27, 166}, {1, 186}, {105, 139}, {66, 108}, {53, 139}, {43, 114}, {199, 200}, {167, 183}, {64, 161}, {60, 191}, {75, 113}, {115, 166}, {196, 200}, {197, 198}, {179, 196}, {181, 188}, {4, 164}, {151, 183}, {35, 62}, {160, 165}, {112, 115}, {41, 185}, {150, 190}, {133, 158}, {187, 193}, {66, 83}, {139, 171}, {21, 127}, {108, 135}, {79, 139}, {33, 110}, {144, 178}, {196, 197}, {168, 189}, {31, 119}, {38, 92}, {114, 180}, {51, 53}, {34, 199}, {65, 131}, {166, 196}, {167, 172}, {181, 193}, {73, 127}, {109, 186}, {73, 163}, {128, 166}, {28, 160}, {47, 132}, {31, 193}, {15, 118}, {11, 62}, {180, 184}, {163, 192}, {37, 172}, {70, 138}, {143, 192}, {51, 110}, {21, 105}, {143, 200}, {123, 130}, {36, 64}, {60, 121}, {11, 59}, {31, 124}, {5, 137}, {188, 191}, {182, 183}, {62, 99}, {117, 194}, {76, 153}, {50, 118}, {193, 198}, {69, 118}, {197, 200}, {59, 160}, {153, 171}, {102, 198}, {175, 195}, {160, 179}, {106, 114}, {29, 65}, {41, 171}, {174, 181}, {136, 188}, {106, 151}, {4, 58}, {93, 179}, {175, 176}, {36, 190}, {101, 149}, {67, 104}, {17, 108}, {83, 114}, {142, 178}, {133, 169}, {105, 168}, {19, 68}, {181, 195}, {18, 83}, {105, 170}, {106, 192}, {125, 175}, {140, 174}, {172, 175}, {82, 89}, {141, 195}, {62, 80}, {186, 194}, {156, 181}, {29, 183}, {33, 188}, {50, 72}, {13, 84}, {184, 192}, {35, 59}, {93, 166}, {136, 163}, {135, 149}, {27, 126}, {189, 200}, {175, 185}, {71, 163}, {91, 172}, {18, 55}, {121, 172}, {33, 81}, {177, 194}, {169, 189}, {10, 21}, {2, 150}, {158, 165}, {11, 24}, {67, 199}, {114, 161}, {163, 165}, {52, 186}, {87, 127}, {179, 198}, {173, 185}, {80, 195}, {137, 156}, {113, 162}, {25, 174}, {192, 196}, {19, 160}, {175, 177}, {110, 183}, {75, 115}, {79, 186}, {89, 97}, {146, 192}, {141, 152}, {185, 191}, {132, 175}, {160, 167}, {154, 199}, {86, 178}, {151, 175}, {57, 126}, {123, 169}, {63, 189}, {105, 136}, {76, 168}, {45, 161}, {44, 65}, {127, 167}, {30, 161}, {6, 107}, {100, 175}, {107, 122}, {168, 191}, {158, 182}, {163, 193}, {24, 45}, {107, 129}, {90, 145}, {177, 183}, {163, 176}, {15, 37}, {2, 58}};

    long start = System.currentTimeMillis();
    boolean res = possibleBipartition(N, arr);
    long elapsedTimeMillis = System.currentTimeMillis() - start;
    System.out.println(elapsedTimeMillis);
    System.out.println(res);
  }
}