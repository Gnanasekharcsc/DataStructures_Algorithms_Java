08/27/2019 : Phone interview


Given a binary tree, and a predicate shouldBeErased(Node n) function, output the resulting forest.

Example:
     F
    / \
   /   \
 [B]    G
 / \     \
A   D    [I]
   / \   /
  C   E H
In this example shouldBeErased() returns true for nodes B & I and false for the other nodes, the resulting forest is : [ A, D, F, H ]
A  F      D    H
    \    / \
     G  C   E



Given
class Node {
	public Node(String name, Node left, Node right) {
	    this.name = name;
	    this.left = left;
	    this.right = right;
	  }
	  public String name;
	  public Node left;
	  public Node right;
	}
}
boolean shouldBeErased(Node node);

Expected
Collection<Node>







List<Node> res;
public List<Node> getForest(Node root){
	res = new ArrayList<>();
	if(root == null) return res;
	helper(null, root, true);
     if(!shouldBeErased(root))
		res.add(root);
	return res;
}

// res  : [A, D, H, F]
private void helper(Node par, Node root, boolean lr){
	if(root == null) return;
	if(shouldBeErased(root)){
		if(root.left != null && !shouldBeErased(root.left)){
	res.add(root.left);
}
if(root.right != null && !shouldBeErased(root.right)){
	res.add(root.right);
}

if(lr && par!= null){
	par.left = null;
}

else if(!lr && par != null){
	par.right = null;
}
}

helper(root, root.left, true);
helper(root, root.right, false);
}

Example:
     F
    / \
   /   \
 [B]    G
 / \     \
A   D    [I]
   / \   /
  C   E H
In this example shouldBeErased() returns true for nodes B & I and false for the other nodes, the resulting forest is : [ A, D, F, H ]
A  F      D    H
    \    / \
     G  C   E





Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Input:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4


1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 1 1 1  === 9
              3

public int largestSquare(int [][] mat){
	if(mat == null || mat.length < 1) return 0;

	int m = mat.length;
	int n = mat[0].length;
	int dim = Integer.MIN_VALUE;
	int [][] dp = new int[m + 1][n + 1];

	for(int i = 1; i < m; i++){
		for(int j = 1; j < n; j++){
	if(mat[i][j] == 1){
		int b4s = dp[i-1][j-1];
int topE = dp[i-1][j];
int botE = dp[i][j-1];
	int newDim =  Math.min( Math.min(topE, botE), b4s);
newDim += 1;
dp[i][j] = newDim;
dim = Math.max(dim, newDim);
}
}
}

return dim * dim;

}
